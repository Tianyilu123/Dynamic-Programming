//

class Solution {
    public int maxProfit(int[] prices, int fee) {
        int len = prices.length;
        int buy = -prices[0];
        int sell = 0;
        
        for(int i=1; i<len; i++) {
            int p = prices[i];
            int nextBuy = Math.max(buy, sell-p);
            int nextSell = Math.max(sell, buy+p-fee);
            
            buy = nextBuy;
            sell = nextSell;
        }
        return sell;
    }
}

//Time complexity: O(n).
// space: O(1)


// method 2:

class Solution {
    public int maxProfit(int[] prices, int fee) {
        if(prices.length < 2) return 0;
   
        int[] buy = new int[prices.length];
        buy[0] = 0 - prices[0];
        
        int[] sell = new int[prices.length];
        
        for(int i=1; i<prices.length; i++) {
            sell[i] = Math.max(sell[i-1], buy[i-1] + prices[i] - fee);
            buy[i] = Math.max(buy[i-1], 0 - prices[i] + sell[i-1]);
        }
        
        return sell[prices.length - 1];
    }
}


// time: O(n);
// space: O(n)
