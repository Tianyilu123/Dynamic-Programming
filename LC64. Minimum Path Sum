//

class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m+1][n+1];
        for(int i=0; i<=m; i++)
            dp[i][0] = Integer.MAX_VALUE;
        for(int i=0; i<=n; i++)
            dp[0][i] = Integer.MAX_VALUE;
        for(int i=1; i<=m; i++) {
            for(int j=1; j<=n; j++) {
                if(i==1 && j==1) {
                    dp[i][j] = grid[i-1][j-1];
                } else {
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i-1][j-1];
                }
            }
        }
        return dp[m][n];
    }
}

// time: O(m*n), space: O(m*n)

// method 2: DP:

class Solution {
    public int minPathSum(int[][] grid) {
        int row = grid.length, col = grid[0].length;
        int[][] dp = new int[row][col];
        
        for(int i=0; i<row; i++) {
            dp[i][0] = grid[i][0];
        }
        for(int j=0; j<col; j++) {
            dp[0][j] = grid[0][j];
        }
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(i==0 && j ==0)
                    dp[i][j] = grid[i][j];
                else if(i == 0)
                    dp[i][j] = dp[i][j-1] + grid[i][j];
                else if(j == 0)
                    dp[i][j] = dp[i-1][j] + grid[i][j];
                else 
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[row-1][col-1];
    }
}

// time: O(m*n), space: O(m*n)


