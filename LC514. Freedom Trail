// method1: DP+memorization
class Solution {
    public int findRotateSteps(String ring, String key) {
        int lenR = ring.length();
        int lenK = key.length();
        return dfs(ring, key, 0, 0, new int[lenR][lenK]);
    }
    
    
    private  int dfs(String ring, String target, int targetIndex, int ringIndex, int[][] memo){
        if(targetIndex == target.length())    
            return 0;
        
        if(memo[ringIndex][targetIndex] != 0)   
            return memo[ringIndex][targetIndex];
        
        int min = Integer.MAX_VALUE;
        
        for(int i = 0;i < ring.length();i++){
            if(ring.charAt(i) != target.charAt(targetIndex))  
                continue;
            
            int diff = Math.abs(i - ringIndex);
            int distance =  1 + Math.min(diff, ring.length() - diff) + 
                dfs(ring, target, targetIndex + 1, i, memo);
            
            min = Math.min(min, distance);            
        }
        
        memo[ringIndex][targetIndex] = min;
        return min;
    }
}

// time: O(m*n*n)
// space: O(m*n)



// method2: DP:

class Solution {
    public int findRotateSteps(String ring, String key) {
        int lenR = ring.length();
        int lenK = key.length();
        int[][] dp = new int[lenK+1][lenR];
        
        for(int i=lenK-1; i>=0; i--) {
            for(int j=0; j<lenR; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                for(int k=0; k<lenR; k++) {
                    if(ring.charAt(k) == key.charAt(i)) {
                        int diff = Math.abs(j-k);
                        int step = Math.min(diff, lenR-diff);
                        dp[i][j] = Math.min(dp[i][j], step + dp[i+1][k]);
                    }
                }
            }
        }
        return dp[0][0] + lenK;
    }
}

// time: O(m*n*n)
// space: O(m*n)

