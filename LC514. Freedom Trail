// method1: DP+memorization
class Solution {
    public int findRotateSteps(String ring, String key) {
        if(ring == null || ring.length() == 0) return -1;
        if(key == null || key.length() == 0) return -1;
        int keyLen = key.length(), ringLen = ring.length();
        int mem[][] = new int[keyLen][ringLen];
        
        int minLevel = Integer.MAX_VALUE;
        for(int i=0; i<keyLen; i++) {
            minLevel = Integer.MAX_VALUE;
            for(int j=0; j<ringLen; j++) {
                mem[i][j] = Integer.MAX_VALUE;
                if(key.charAt(i) == ring.charAt(j)) {
                    if(i==0) {
                        mem[i][j] = getDistance(j,0,ringLen) + 1;
                    }else{
                        for(int k=0; k<ringLen; k++) {
                            if(mem[i-1][k] != Integer.MAX_VALUE) {
                                mem[i][j] = Math.min(mem[i][j], 
                                                     mem[i-1][k] + getDistance(j,k,ringLen)+1);
                            }
                        }
                    }
                }
                minLevel = Math.min(minLevel, mem[i][j]);
            }
        }
        return minLevel;
    }
    
    private int getDistance(int idx1, int idx2, int len) {
        return Math.min((len + idx1 - idx2)%len, (len + idx2 - idx1)%len);
    }
}

// time: O(m*n*n)
// space: O(m*n)


// method2: DP with rotating Map:



// method 3: DFS + Memorization:

class Solution {
    public int findRotateSteps(String ring, String key) {
        char[] ringArr = ring.toCharArray();
        char[] keyArr = key.toCharArray();
        
        return dfs(ringArr, keyArr, 0, 0, new int[ringArr.length][keyArr.length]);
    }
    private  int dfs(char[] ring, char[] target, int targetIndex, int ringIndex, int[][] memo){
        if(targetIndex == target.length)    return 0;
        
        if(memo[ringIndex][targetIndex] != 0)   return memo[ringIndex][targetIndex];
        
        int min = Integer.MAX_VALUE;
        for(int i = 0;i < ring.length;i++){
            if(ring[i] != target[targetIndex])  continue;
            
            int dif = Math.abs(i - ringIndex);
            int distance =  1 + Math.min(dif, ring.length - dif) + 
                dfs(ring, target, targetIndex + 1, i, memo);
            min = Math.min(min, distance);            
        }
        
        memo[ringIndex][targetIndex] = min;
        return min;
    }
}

