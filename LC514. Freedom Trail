// method1: DP+memorization
class Solution {
    public int findRotateSteps(String ring, String key) {
        int lenR = ring.length();
        int lenK = key.length();
        return dfs(ring, key, 0, 0, new int[lenR][lenK]);
    }
    
    
    private  int dfs(String ring, String target, int targetIndex, int ringIndex, int[][] memo){
        if(targetIndex == target.length())    
            return 0;
        
        if(memo[ringIndex][targetIndex] != 0)   
            return memo[ringIndex][targetIndex];
        
        int min = Integer.MAX_VALUE;
        
        for(int i = 0;i < ring.length();i++){
            if(ring.charAt(i) != target.charAt(targetIndex))  
                continue;
            
            int diff = Math.abs(i - ringIndex);
            int distance =  1 + Math.min(diff, ring.length() - diff) + 
                dfs(ring, target, targetIndex + 1, i, memo);
            
            min = Math.min(min, distance);            
        }
        
        memo[ringIndex][targetIndex] = min;
        return min;
    }
}

// time: O(m*n*n)
// space: O(m*n)


// method2: DP with rotating Map:



// method 3: DFS + Memorization:

class Solution {
    public int findRotateSteps(String ring, String key) {
        char[] ringArr = ring.toCharArray();
        char[] keyArr = key.toCharArray();
        
        return dfs(ringArr, keyArr, 0, 0, new int[ringArr.length][keyArr.length]);
    }
    private  int dfs(char[] ring, char[] target, int targetIndex, int ringIndex, int[][] memo){
        if(targetIndex == target.length)    return 0;
        
        if(memo[ringIndex][targetIndex] != 0)   return memo[ringIndex][targetIndex];
        
        int min = Integer.MAX_VALUE;
        for(int i = 0;i < ring.length;i++){
            if(ring[i] != target[targetIndex])  continue;
            
            int dif = Math.abs(i - ringIndex);
            int distance =  1 + Math.min(dif, ring.length - dif) + 
                dfs(ring, target, targetIndex + 1, i, memo);
            min = Math.min(min, distance);            
        }
        
        memo[ringIndex][targetIndex] = min;
        return min;
    }
}

