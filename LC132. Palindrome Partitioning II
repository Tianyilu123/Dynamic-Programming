//

class Solution {
    public int minCut(String s) {
        if(s == null || s.length() == 0) return 0;
        int len = s.length();
        int[] cuts = new int[len];
        boolean[][] isPalindrome = new boolean[len][len];
        
        for(int i=0; i<len; i++){
            int min = i;
            for(int j=0; j<=i; j++){
                if(s.charAt(j) == s.charAt(i) && (i-j < 2 || isPalindrome[i-1][j+1])){
                    isPalindrome[i][j] = true;
                    min = j == 0 ? 0 : Math.min(min, cuts[j-1] + 1);
                }
            }
            cuts[i] = min;
        }
        return cuts[len - 1];
    }
}

// time: O(n^2);
// space: O(n^2);
