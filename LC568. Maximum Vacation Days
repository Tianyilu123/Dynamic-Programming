// Method 1: DP:
class Solution {
    public int maxVacationDays(int[][] flights, int[][] days) {
        
        if(days == null || days.length == 0 || days[0] == null || days[0].length == 0)
            throw new IllegalArgumentException();
            
        if(flights == null || flights.length == 0 || flights[0] == null || flights[0].length == 0) {
            int sum = 0;
            for(int i=0; i<days[0].length; i++) {
                sum += days[0][i];
            }
            return sum;
        }
        
        int cityLen = flights.length;
        int weekLen = days[0].length;
        
        int[] dp = new int[cityLen];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        
        for(int i=0; i<weekLen; i++) {
            int rollDp[] = new int[cityLen];
            Arrays.fill(rollDp, Integer.MIN_VALUE);
            
            for(int j=0; j<cityLen; j++) {
                for(int k=0; k<cityLen; k++) {
                if(k==j || flights[k][j] == 1) {
                    rollDp[j] = Math.max(rollDp[j], dp[k]+days[j][i]);
                }
            }
        }
        dp = rollDp;
    }
    
    int max = 0;
    for(int j=0; j<cityLen; j++) {
        max = Math.max(max, dp[j]);
    }
    return max;
}
}

// time: O(k*N*N)
// space: O(n)



// Method 2: DP:

class Solution {
    public int maxVacationDays(int[][] flights, int[][] days) {
        
        if(days == null || days.length == 0 || flights == null || flights.length == 0
          || days[0].length == 0 || flights[0].length == 0) return 0;
        
        int n = days.length, k = days[0].length;
        int[][] dp = new int[n][k];
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < k; j ++) {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        dp[0][0] = days[0][0];
        for(int i = 1; i < n; i ++) {
            if(flights[0][i] == 1) dp[i][0] = days[i][0];
        }
        
        for(int week = 1; week < k; week ++) {
            for(int dest = 0; dest < n; dest ++) {
                for(int depart = 0; depart < n; depart ++) {
                    if(dp[depart][week - 1] != Integer.MIN_VALUE && (flights[depart][dest] == 1 
                                                      || depart == dest)) {
                        dp[dest][week] = Math.max(dp[dest][week], 
                                                  dp[depart][week - 1] + days[dest][week]);
                    }
                }
            }
        }
        
        int res = 0;
        for(int city = 0; city < n; city ++) {
            if(dp[city][k - 1] > res) res = dp[city][k - 1];
        }
        return res;
    }
}
