//  method 1: DP

class Solution {
    public int maxProfit(int[] prices) {
        int buy1 = Integer.MIN_VALUE, buy2 = Integer.MIN_VALUE;
        int sell1 = 0, sell2 = 0;
        for(int price: prices){
            buy1 = Math.max(buy1, -price);
            sell1 = Math.max(sell1, buy1+price);
            buy2 = Math.max(buy2, sell1 - price);
            sell2 = Math.max(sell2, buy2 + price);
        }
        return sell2;
    }
}

// time: O(n)
// space: O(1)


// method 2: DP:

class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0)
            return 0;
        int len = prices.length;
        int[][] sell = new int[2+1][len];
        int[][] buy = new int[2+1][len];
        
        for(int i=1; i<=2; i++) {
            buy[i][0] = -prices[0];
            for(int j=1; j<len; j++) {
                sell[i][j] = Math.max(sell[i][j-1], buy[i][j-1] + prices[j]);
                buy[i][j] = Math.max(buy[i][j-1], sell[i-1][j-1] - prices[j]);
            }
        }
        return sell[2][len-1];
    }
}

// time: O(n)
// space: O(n)
