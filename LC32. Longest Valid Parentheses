// method 1: DP

class Solution {
    public int longestValidParentheses(String s) {
        int len = s.length(), max = 0;
        int[] m = new int[len + 1];
        
        for(int i=len-1; i>=0; i--) {
            if(s.charAt(i) == ')') {
                m[i] = 0;
            } else if(s.charAt(i) == '(') {
                int j = i + m[i+1] + 1;
                if(j < len && s.charAt(j) == ')') {
                    m[i] = m[i+1] + 2;
                    if(j + 1 < len)
                        m[i] += m[j+1];
                }
            }
            max = Math.max(max, m[i]);
        }
        return max;
    }
}

// time: O(n), space: O(n)


// method 2: stack:

class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<>();
        int res = 0;
        int start = -1;
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i)=='('){
                stack.push(i);
            } else if(s.charAt(i)==')'){
                if(stack.isEmpty()) {
                    start = i;
                } else{
                    stack.pop();
                    if(stack.isEmpty()){
                        res = Math.max(res, i-start);
                    } else{
                        res = Math.max(res, i-stack.peek());
                    }
                }
            }
        }
        return res;
    }
}

// time: O(n), space: O(n)
