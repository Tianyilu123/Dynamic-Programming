// method 1: DP-2dimensions

class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0)
            throw new IllegalArgumentException("null");
        if(nums.length == 1) return nums[0];
        
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int res = nums[0];
        
        for(int i=1; i<nums.length; i++) {
            dp[i] = nums[i] + (dp[i-1] < 0 ? 0:dp[i-1]);
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}

//time: O(n)
// space: O(n)



// method 2: DP-1dimesion
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0) return -1;
        if(nums.length == 1) return nums[0];
        
        int loc = nums[0];
        int max = nums[0];
        
        for(int i=1; i<nums.length; i++) {
            loc =  Math.max(loc + nums[i], nums[i]);
            max = Math.max(max, loc);
        }
        return max;
    }
}

// time: O(n), space:O(1)
