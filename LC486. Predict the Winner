ways: 1->2->3->4 : all of them are necessary:

// method 1: DFS:

class Solution {
    public boolean PredictTheWinner(int[] nums) {
        return helper(nums, 0, nums.length-1) >= 0;
    }
    
    private int helper(int[] nums, int start, int end) {
        if(start == end) {
            return nums[start];
        }
        return Math.max(nums[start]-helper(nums, start+1, end), 
                        nums[end] - helper(nums, start, end-1));
    }
}


// method 2: memorization

class Solution {
    public boolean PredictTheWinner(int[] nums) {
        int len = nums.length;
        return helper(nums, 0, len-1, new Integer[len][len]) >= 0;
    }
    
    private int helper(int[] nums, int start, int end, Integer[][] dp) {
        
        if(dp[start][end] != null) return dp[start][end];
        
        if(start == end) {
            return nums[start];
        } else {
            dp[start][end] =  Math.max((nums[start] - helper(nums, start+1, end, dp)),
                            (nums[end] - helper(nums, start, end-1, dp))) ;
            return dp[start][end];
        }
    }
}

// method 3: DP - 2 dimentsion:

class Solution {
    public boolean PredictTheWinner(int[] nums) {
        if(nums == null || nums.length == 0)
            return false;
        int len = nums.length;
        int[][] dp = new int[len][len];
        
        for(int i=len-1; i>=0; i--) {
            for(int j=i; j<len; j++) {
                if(i==j)
                    dp[i][i] = nums[i];
                else
                    dp[i][j] = Math.max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1]);
            }
        }
        return dp[0][len-1] >= 0 ;
    }
}

class Solution {
    public boolean PredictTheWinner(int[] nums) {
        if(nums == null || nums.length == 0) return false;
        int len = nums.length, sum = 0;
        int[][] dp = new int[len][len];
        
        for(int i=len-1; i>=0; i--) {
            sum += nums[i];
            for(int j=i; j<len; j++) {
                if(i==j) {
                    dp[i][j] = nums[i];
                    continue;
                }
                int a = (i+2<=j) ? dp[i+2][j] : 0;
                int b = (i+1<=j-1) ? dp[i+1][j-1] : 0;
                int c = (i<=j-2) ? dp[i][j-2] : 0;
                    
                dp[i][j] = Math.max(nums[i] + Math.min(a,b), nums[j] + Math.min(b,c));
            }
        }
        return dp[0][len-1] >= sum-dp[0][len-1];
    }
}


// method 4: DP - 1 dimension

class Solution {
    public boolean PredictTheWinner(int[] nums) {
        if(nums == null || nums.length == 0)
            return false;
        int len = nums.length;
        int[] dp = new int[len];
        
        for(int i=len-1; i>=0; i--) {
            for(int j=i; j<len; j++) {
                if(i==j)
                    dp[i] = nums[i];
                else
                    dp[j] = Math.max(nums[i] - dp[j], nums[j] - dp[j-1]);
            }
        }
        return dp[len-1] >= 0 ;
    }
}

// time: O(n^2)
// space: O(n)
