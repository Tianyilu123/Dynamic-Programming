// method 1: DP

class Solution {
    public boolean isMatch(String s, String p) {
        if(s == null || p == null) return false;
        int lenS = s.length(), lenP = p.length();
        
        boolean[][] dp = new boolean[lenS+1][lenP+1];
        dp[0][0] = true;
        
        for(int i=1; i<=lenP; i++) {
            if(p.charAt(i-1) == '*')
                dp[0][i] = dp[0][i-2];
        }
        
        for(int i=1; i<=lenS; i++) {
            for(int j=1; j<=lenP; j++) {
                if(p.charAt(j-1) == '.' || p.charAt(j-1)==s.charAt(i-1))
                    dp[i][j] = dp[i-1][j-1];
                else if(p.charAt(j-1) == '*') {
                    if(p.charAt(j-2) == s.charAt(i-1) || p.charAt(j-2) == '.')
                        dp[i][j] = dp[i][j-2] || dp[i-1][j];
                    else 
                        dp[i][j] = dp[i][j-2];
                }    
            }
        }
        return dp[lenS][lenP];
    }
}

// method 2: DP:

class Solution {
    public boolean isMatch(String s, String p) {
        if(s == null || p == null) return false;
        int lenS = s.length(), lenP = p.length();
        if(lenP == 0) return lenS == 0;
        
        boolean[][] dp = new boolean[lenS+1][lenP+1];
        
        dp[lenS][lenP] = true;
        int k = lenP-2;
        
        while(k>=0) {
            if(p.charAt(k+1) == '*') {
                dp[lenS][k] = true;
            } else {
                break;
            }
            k = k-2;
        }
        
        for(int i=lenS-1; i>=0; i--) {
            for(int j = lenP-1; j>=0; j--) {
                if(p.charAt(j) == '*') {
                    continue;
                }
                
                if(j+1 >= lenP || p.charAt(j+1) != '*') {
                    if(p.charAt(j) == '.' || p.charAt(j) == s.charAt(i)) {
                        dp[i][j] = dp[i+1][j+1];
                    } else {
                        dp[i][j] = false;
                    }
                } else {
                    int idx = i - 1;
                    dp[i][j] = false;
                    while(idx < lenS && (idx<i || p.charAt(j) == '.' || 
                            p.charAt(j) == s.charAt(idx))) {
                        if(dp[idx+1][j+2]) {
                            dp[i][j] = true;
                            break;
                        }
                        idx++;
                    }
                }
            }
        }
        return dp[0][0];
    }
}



//method 3: mem + DFSclass Solution {
    public boolean isMatch(String s, String p) {
        if(s == null || p == null) return false;
        
        int lenS = s.length(), lenP = p.length();
        Boolean[][] mem = new Boolean[lenS+1][lenP+1];
        
        return helper(s,0,p,0,mem);
    }
    
    private boolean helper(String s, int idxS, String p, int idxP, Boolean[][]mem) {
        int lenP = p.length(), lenS = s.length();
        if(mem[idxS][idxP] != null)
            return mem[idxS][idxP];
        
        if(idxP==lenP) {
            return idxS == lenS;
        } else if(idxP == lenP-1 || p.charAt(idxP+1) != '*') {
            if(idxS < lenS && 
              (p.charAt(idxP) == '.' || p.charAt(idxP) == s.charAt(idxS))) {
                mem[idxS][idxP] = helper(s, idxS+1, p, idxP+1, mem);
            } else {
            mem[idxS][idxP] = false;
            return false;
           } 
        } else {
            int i = idxS-1;
            while(i<lenS && (i<idxS || p.charAt(idxP)=='.' || p.charAt(idxP) == 
                            s.charAt(i))) {
                if(helper(s, i+1, p, idxP+2, mem)) {
                    mem[idxS][idxP] = true;
                    return true;
                }
                i++;
            }
            mem[idxS][idxP] = false;
        }
        return mem[idxS][idxP];
    }
}

